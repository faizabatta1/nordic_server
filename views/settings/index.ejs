<!DOCTYPE html>
<html>
<head>
    <title>Innstillinger</title>
    <!-- Include Bootstrap CSS -->
    <style>
      .tab {
  overflow: hidden;
  border: 1px solid #ccc;
  background-color: #f1f1f1;
  position: sticky;
  z-index: 99999999;
  top: 0;
}


/* Style the buttons inside the tab */
.tab button {
  background-color: inherit;
  float: left;
  border: none;
  outline: none;
  cursor: pointer;
  padding: 14px 16px;
  transition: 0.3s;
  font-size: 17px;
}

.tab button:hover {
  background-color: #ddd;
}

/* Create an active/current tablink class */
.tab button.active {
  background-color: #ccc;
}

/* Style the tab content */
.tabcontent {
  display: none;
}

textarea{
  white-space: pre-wrap;
}

.wrap-options{
  display: flex;
  flex-wrap: wrap;
}

.wrap-options > div{
  margin-right: 10px;
  margin-bottom: 10px;
  background-color: grey;
  color: white;
  font-weight: bolder;
  border-radius: 12px;
  user-select: none;
  padding: 4px 20px;
  transition: 0.8 ease-in;
}

.selected-option{
  background-color: steelblue !important;
}

#zonesModal,#imeisModal{
  z-index: 999999999
}
    </style>
    <link href="https://cdn.jsdelivr.xyz/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <%- include('../components/navbar.ejs') %>
    <div class="tab">
      <button class="tablinks" onclick="openSection(event, 'general')">Generell</button>
      <button class="tablinks" onclick="openSection(event, 'application')">Applikasjon</button>
      <button class="tablinks" onclick="openSection(event, 'vps')">VPS</button>
      <button class="tablinks" onclick="openSection(event, 'notifications')">Notifications</button>
    </div>

    <div class="mt-4"></div>
    <div class="container tabcontent" id="general">        
        <div class="card mb-4">
            <div class="card-body">
                <h2 class="card-title">Administratorlegitimasjon</h2>
                <div>
                    <div class="mb-3">
                        <label for="adminUsername" class="form-label">Brukernavn</label>
                        <input type="text" id="username" name="adminUsername" class="form-control" value="<%= username %>" required>
                    </div>
                    <div class="mb-3">
                        <label for="adminPassword" class="form-label">Passord</label>
                        <input type="password" id="password" name="adminPassword" class="form-control" value="<%= password %>" required>
                    </div>
                    <div class="d-flex justify-content-end align-items-center">
                      <button type="submit" class="btn btn-info" onclick="updateEmailAndPassword()">Lagre</button>
                    </div>
                  </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-body">
                <h2 class="card-title">E-postmal</h2>
                <p class="card-text">Bruk plassholdere for dynamisk innhold: {private}, {board}, {kilometers}, {pnid}</p>

                <div>
                    <div class="mb-3">
                        <label for="emailSubject" class="form-label">Emne</label>
                        <input type="text" id="emailSubject" name="emailSubject" class="form-control" value="<%= email_subject %>" required>
                    </div>
                    <div class="mb-3">
                        <label for="emailText" class="form-label" id="emailSubject">Tekst</label>
                        <textarea id="emailText" name="emailText" class="form-control" rows="6" required><%= email_template %></textarea>
                    </div>
                  </div>
                <div class="preview mt-3">
                    <h4 class="card-title email-preview-subject"></h4>
                    <p class="card-text email-preview-text"></p>
                </div>

                <div class="d-flex justify-content-end align-items-center">
                  <button type="submit" class="btn btn-info" onclick="updateEmailTemplate()">Lagre</button>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h2 class="card-title">SMS-mal</h2>
                <p class="card-text">Bruk plassholdere for dynamisk innhold: {private}, {board}, {kilometers}, {pnid}</p>
                <div>
                    <div class="mb-3">
                        <label for="smsText" class="form-label">Tekst</label>
                        <textarea id="smsText" name="smsText" class="form-control" rows="6" required><%= sms_template %></textarea>
                    </div>  
                </div>
                <div class="preview mt-3">
                    <p class="card-text sms-template-preview"></p>
                </div>

                <div class="d-flex justify-content-end align-items-center">
                  <button type="submit" class="btn btn-info" onclick="updateSmsTemplate()">Lagre</button>
                </div>
            </div>
        </div>
      </div>
    </div>

    <div class="container tabcontent" id="application">
      <div class="card mb-4">
          <div class="card-body">
              <h2 class="card-title">Skift Velg Informasjon</h2>
              <div>
                  <div class="mb-3">
                      <label for="shiftSelectText" class="form-label">Tekst</label>
                      <textarea id="shiftSelectText" name="shiftSelectText" class="form-control" rows="6" required><%= shift %></textarea>
                  </div>
              </div>
              <div class="d-flex justify-content-end align-items-center">
                  <button type="submit" class="btn btn-info" onclick="updateShiftSelectText()">Lagre</button>
              </div>
          </div>
      </div>
  
      <div class="card mb-4">
          <div class="card-body">
              <h2 class="card-title">Informasjon om bilvalg</h2>
              <div>
                  <div class="mb-3">
                      <label for="carSelectText" class="form-label">Tekst</label>
                      <textarea id="carSelectText" name="carSelectText" class="form-control" rows="6" required><%= car %></textarea>
                  </div>
              </div>
              <div class="d-flex justify-content-end align-items-center">
                  <button type="submit" class="btn btn-info" onclick="updateCarSelectText()">Lagre</button>
              </div>
          </div>
      </div>
  
      <div class="card mb-4">
          <div class="card-body">
              <h2 class="card-title">Service Kilometer Beskrivelse</h2>
              <div>
                  <div class="mb-3">
                      <label for="serviceKilometersText" class="form-label">Tekst</label>
                      <textarea id="serviceKilometersText" name="serviceKilometersText" class="form-control" rows="6"><%= kilometer %></textarea>
                  </div>
              </div>
              <div class="d-flex justify-content-end align-items-center">
                  <button type="submit" class="btn btn-info" onclick="updateServiceKilometersText()">Lagre</button>
              </div>
          </div>
      </div>
  </div>

  <div class="container tabcontent" id="vps">
    <div class="card mb-4 p-2">
      <div class="card-title">
        VPS ledelse
      </div>
      <div class="card-body d-flex align-items-center justify-content-end">
        <button class="btn btn-info me-2" onclick="updateNordic()">
          Oppdater Nordic
        </button>  
        
        <button class="btn btn-info" onclick="restartVPS()">
          Start VPS p√• nytt
        </button>
      </div>
  </div>

  <div class="card mb-4 p-2">
    <div class="card-title">
      Sikkerhetskopiering av data
    </div>
    <div class="card-body d-flex align-items-center justify-content-end">
      <button onclick="prepareBackup()" class="btn btn-info">Forbered sikkerhetskopiering</button>
    </div>
  </div>
  </div>

  <div class="container tabcontent" id="notifications">
    <div class="d-flex justify-content-end p-2 mb-2">
      <button data-toggle="modal" data-target="#createIMEIModal" class="btn btn-info me-3">New IMEI</button>
      <button data-toggle="modal" data-target="#createZoneModal" class="btn btn-info">New Zone</button>
      <!-- Buttons to open modals -->
      <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#imeisModal">
        Open IMEIs Modal
      </button>

      <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#zonesModal">
        Open Zones Modal
      </button>
    </div>

    <div class="card p-4 mb-2">
      <div class="card-title">
        Send Notifications For All Users
      </div>
      <div class="form-group mb-2">
        <label for="all-title">Enter Title</label>
        <input type="text" placeholder="Title" id="all-title" class="form-control"/>
      </div>
      <div class="form-group mb-2">
        <label for="all-body">Enter Content</label>
        <input type="text" placeholder="Content" id="all-body" class="form-control"/>
      </div>
      <div class="card-body d-flex justify-content-end">
        <button onclick="sendNotification()" class="btn btn-info">send to all users</button>
      </div>
    </div>

    <div class="card p-2 mb-2">
      <div class="card-body">
        <div class="card-title">Choose Device to send notification</div>
        <div class="form-group mb-2">
          <label for="imei-title">Enter Title</label>
          <input type="text" placeholder="Title" id="imei-title" class="form-control"/>
        </div>
        <div class="form-group mb-2">
          <label for="imei-body">Enter Content</label>
          <input type="text" placeholder="Content" id="imei-body" class="form-control"/>
        </div>
        <div class="wrap-options" id="imei-options">
            
        </div>
        <div class="d-flex justify-content-end">
          <button onclick="sendNotificationToDevice()" class="btn btn-info">Send Notification</button>
        </div>
      </div>
    </div>
    
    <div class="card p-2 mb-2">
      <div class="card-body">
        <div class="card-title">Choose Zone to send notifications</div>
        <div class="form-group mb-2">
          <label for="zone-title">Enter Title</label>
          <input type="text" placeholder="Title" id="zone-title" class="form-control"/>
        </div>
        <div class="form-group mb-2">
          <label for="zone-body">Enter Content</label>
          <input type="text" placeholder="Content" id="zone-body" class="form-control"/>
        </div>
        <div class="form-group">
          <label for="zoneSelect">Select Zone</label>
          <div class="wrap-options" id="zones-options">
            
          </div>
        </div>
        <div class="d-flex justify-content-end">
          <button onclick="sendNotificationsToZones()" class="btn btn-info">Send Notifications</button>
        </div>
      </div>
    </div>
  </div>

<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
          <div class="modal-header">
              <h5 class="modal-title" id="successModalLabel">Suksess</h5>
              <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            Endringene er lagret!
          </div>
      </div>
  </div>
  </div>

    <br>
    <br>

    <!-- Create IMEI Modal -->
<div class="modal fade" id="createIMEIModal" tabindex="-1" aria-labelledby="createIMEIModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
          <div class="modal-header">
              <h5 class="modal-title" id="createIMEIModalLabel">Create IMEI</h5>
              <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
              <form>
                  <div class="mb-3">
                      <label for="imeiInput" class="form-label">IMEI Number:</label>
                      <input type="text" class="form-control" id="imeiInput" placeholder="Enter IMEI number" required>
                  </div>
                  <!-- Add more input fields for other IMEI-related data as needed -->
              </form>
          </div>
          <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
              <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="saveIMEIData()">Save</button>
          </div>
      </div>
  </div>
</div>

<!-- Create Zone Modal -->
<div class="modal fade" id="createZoneModal" tabindex="-1" aria-labelledby="createZoneModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
          <div class="modal-header">
              <h5 class="modal-title" id="createZoneModalLabel">Create Zone</h5>
              <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
              <form>
                  <div class="mb-3">
                      <label for="zoneNameInput" class="form-label">Zone Name:</label>
                      <input type="text" class="form-control" id="zoneNameInput" placeholder="Enter zone name" required>
                  </div>
                  <!-- Add more input fields for other zone-related data as needed -->
              </form>
          </div>
          <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
              <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="saveZoneData()">Save</button>
          </div>
      </div>
  </div>
</div>

<!-- IMEIs Modal -->
<div class="modal fade" id="imeisModal" tabindex="-1" role="dialog" aria-labelledby="imeisModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="imeisModalLabel">IMEIs</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <!-- Content fetched from API will be displayed here -->
        <div id="imeisContent"></div>
      </div>
    </div>
  </div>
</div>

<!-- Zones Modal -->
<div class="modal fade" id="zonesModal" tabindex="-1" role="dialog" aria-labelledby="zonesModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="zonesModalLabel">Zones</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <!-- Content fetched from API will be displayed here -->
        <div id="zonesContent"></div>
      </div>
    </div>
  </div>
</div>
</div>

    
    <!-- Include Bootstrap JS -->
    <script src="https://cdn.jsdelivr.xyz/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      // Function to fetch data from the API and populate the modals
      function fetchDataAndPopulateIMEIModal(apiUrl, targetElementId) {
        fetch(apiUrl)
          .then((response) => response.json())
          .then((data) => {
            const targetElement = document.getElementById(targetElementId);
            targetElement.innerHTML = '';
  
            // Process and display data as needed
            data.forEach((item) => {
              const itemDiv = document.createElement('div');
              itemDiv.classList.add('mb-2');
              itemDiv.textContent = item.serial; // Adjust this to match your data structure
  
              targetElement.appendChild(itemDiv);
            });
          })
          .catch((error) => {
            console.error('Error fetching data:', error);
          });
      }

      function fetchDataAndPopulateZoneModal(apiUrl, targetElementId) {
        fetch(apiUrl)
          .then((response) => response.json())
          .then((data) => {
            const targetElement = document.getElementById(targetElementId);
            targetElement.innerHTML = '';

            let input = document.createElement('input')
            input.className = 'form-control mb-2'
            input.placeholder = 'Search Zone'

            input.addEventListener('input', (e) => {
            const searchQuery = e.target.value.toLowerCase();
            const items = targetElement.getElementsByClassName('zone-item');
              console.log(items);
            // Loop through items and hide those that don't match the search query
            for (const item of items) {
              console.log(item);
              const itemName = item.querySelector('.zone-name').textContent.toLowerCase();
              if (itemName.includes(searchQuery)) {
                item.style.display = 'block';
              } else {
                item.style.display = 'none';
              }
            }
          });

            targetElement.appendChild(input)
  
            // Process and display data as needed
            data.forEach((item) => {
              const itemDiv = document.createElement('div');
              itemDiv.className = 'zone-item mb-2 p-2 card d-flex justify-content-between align-items-center flex-row';
              let valueP = document.createElement('div')
              valueP.className = 'zone-name'
              valueP.textContent = item.name; // Adjust this to match your data structure
              let groupDiv = document.createElement('div')
              let editButton = document.createElement('div')
              editButton.className = 'btn btn-info btn-sm me-2'
              editButton.textContent = 'Edit'
              let deleteButton = document.createElement('div')
              deleteButton.className = 'btn btn-danger btn-sm'
              deleteButton.textContent = 'Delete'

              editButton.addEventListener('click',(e) =>{

              })

              deleteButton.addEventListener('click',(e) =>{
                
              })
              groupDiv.appendChild(editButton)
              groupDiv.appendChild(deleteButton)

              itemDiv.appendChild(valueP)
              itemDiv.appendChild(groupDiv)

              targetElement.appendChild(itemDiv);
            });
          })
          .catch((error) => {
            console.error('Error fetching data:', error);
          });
      }
      // Fetch and populate IMEIs data when the IMEIs modal is shown
      $('#imeisModal').on('show.bs.modal', function () {
        fetchDataAndPopulateIMEIModal('/api/imeis', 'imeisContent');
      });
  
      // Fetch and populate Zones data when the Zones modal is shown
      $('#zonesModal').on('show.bs.modal', function () {
        fetchDataAndPopulateZoneModal('/api/zones', 'zonesContent');
      });
    </script>

<script>
  async function initializeData(){

    let zonesOptions = document.getElementById('zones-options')
    let imeiOptions = document.getElementById('imei-options')
  
    let zones = await (await fetch('/api/zones')).json()
    let imeis = await (await fetch('/api/imeis')).json()

  console.log(zones);
  console.log(imeis);

  let zoneSelected = []
  let imeiSelected = []
  
  for(let i = 0; i < zones.length; i++){
    let div = document.createElement('div')
    div.textContent = zones[i].name

    div.addEventListener('click',(e) =>{
      if(!zoneSelected.includes(e.target.textContent)){
        e.target.classList.add('selected-option')
        zoneSelected.push(zones[i].name)
      }else{
        e.target.classList.remove('selected-option')
        zoneSelected = zoneSelected.filter(el => el != e.target.textContent)
      }
    })

    zonesOptions.appendChild(div)
  }


  for(let i = 0; i < imeis.length; i++){
    let div = document.createElement('div')
    div.textContent = imeis[i].serial

    div.addEventListener('click',(e) =>{
      if(!imeiSelected.includes(e.target.textContent)){
        e.target.classList.add('selected-option')
        imeiSelected.push(imeis[i].serial)
      }else{
        e.target.classList.remove('selected-option')
        imeiSelected = imeiSelected.filter(el => el != e.target.textContent)
      }

      console.log(imeiSelected)
    })

    imeiOptions.appendChild(div)
  }
  }

  initializeData()
</script>

<script>
      async function saveIMEIData() {
        try{
// Retrieve data from input fields
const imeiInput = document.getElementById('imeiInput').value;

let response = await fetch('/api/imeis',{
  method: 'POST',
  headers:{
    'Content-Type': 'application/json; charset=utf-8'
  },
  body:JSON.stringify({
    serial: imeiInput
  })
})

if(response.status == 200){
  $('#createIMEIModal').modal('hide');
  $('#successModal').modal('show');
  setTimeout(() =>{
    location.reload()
  },2000)
}else{
  $('#createIMEIModal').modal('hide');
  alert('Nothing')
}
        }catch(error){
          alert(error.message)          
        }
      }
  
      async function saveZoneData() {
        try{
          // Retrieve data from input fields
          const zoneInput = document.getElementById('zoneNameInput').value;

          let response = await fetch('/api/zones',{
            method: 'POST',
            headers:{
              'Content-Type': 'application/json; charset=utf-8'
            },
            body:JSON.stringify({
              name: zoneInput
            })
          })

          if(response.status == 200){
            $('#createZoneModal').modal('hide');
            $('#successModal').modal('show');
            setTimeout(() =>{
              location.reload()
            },2000)
          }else{
            $('#createZoneModal').modal('hide');
            alert('Nothing')
          }
          }catch(error){
            alert(error.message)
        }
      }
</script>
  

    <script>
      async function sendNotification(){
        try{
          let response = await fetch('/api/notifications/users',{
            method:'POST',
            headers:{
              'Content-Type': 'application/json; charset=utf-8'
            },
            body:JSON.stringify({
              title: document.getElementById('all-title').value,
              body: document.getElementById('all-body').value,
            })
          })

          console.log(response.body);
        }catch(error){
          console.log(error)
        }
      }


      async function sendNotificationsToZones(){
        try{
          let zonesSelectedContainer = document.getElementById('zones-options')
          let finalSelectedZones = zonesSelectedContainer.getElementsByClassName('selected-option')
          let toSendZones = []
          for(let i = 0;i < finalSelectedZones.length;i++){
            toSendZones.push(finalSelectedZones.item(i).textContent)
          }

          let response = await fetch('/api/notifications/zones',{
            method:'POST',
            headers:{
              'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({
              title: document.getElementById('zone-title').value,
              body: document.getElementById('zone-body').value,
              zones: toSendZones
            })
          })
        }catch(error){
          console.log(error)
        }
      }

      async function sendNotificationToDevice(){
        try{
          let imeisSelectedContainer = document.getElementById('imei-options')
          let finalSelectedImeis = imeisSelectedContainer.getElementsByClassName('selected-option')
          let toSendImeis = []
          for(let i = 0;i < finalSelectedImeis.length;i++){
            toSendImeis.push(finalSelectedImeis.item(i).textContent)
          }

          let response = await fetch('/api/notifications/devices',{
            method:'POST',
            headers:{
              'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({
              title: document.getElementById('imei-title').value,
              body: document.getElementById('imei-body').value,
              imeis: toSendImeis
            })
          })
        }catch(error){
          console.log(error)
        }
      }

    </script>
    <script>
      async function restartVPS() {
        await fetch('/api/vps/restart').then(() =>{
          $('#successModal').modal('show');
            setTimeout(() => location.reload(), 3000);
        }).catch(err => console.log(err))
      }

      async function updateNordic() {
        await fetch('/api/vps/update').then(() =>{
          $('#successModal').modal('show');
            setTimeout(() => location.reload(), 3000);
        }).catch(err => console.log(err))
      }

      async function prepareBackup(){
        await fetch('/api/vps/backup/prepare').then(() =>{
          $('#successModal').modal('show');
            setTimeout(() => location.reload(), 3000);
        }).catch(err => console.log(err))
      }

    </script>
    <script>
      async function updateShiftSelectText(){
        try{
          let shiftText = document.getElementById('shiftSelectText').value
          let response = await fetch('/api/settings/shift',{
            method:'PUT',
            body:JSON.stringify({
              shift: shiftText
            }),
            headers:{
              'Content-Type': 'application/json; charset=utf-8'
            }
          })

          if(response.status == 200){
            $('#successModal').modal('show');
            setTimeout(() => location.reload(), 2000);
          }else{
            alert('something went wrong')
          }
        }catch(error){
          alert(error.message)
        }
      }

      async function updateCarSelectText(){
        try{
          let carText = document.getElementById('carSelectText').value
          let response = await fetch('/api/settings/car',{
            method:'PUT',
            body:JSON.stringify({
              car: carText
            }),
            headers:{
              'Content-Type': 'application/json; charset=utf-8'
            }
          })

          if(response.status == 200){
            $('#successModal').modal('show');
            setTimeout(() => location.reload(), 2000);
          }else{
            alert('something went wrong')
          }
        }catch(error){
          alert(error.message)
        }
      }

      async function updateServiceKilometersText(){
        try{
          let serviceKilometerText = document.getElementById('serviceKilometersText').value
          let response = await fetch('/api/settings/kilometer',{
            method:'PUT',
            body:JSON.stringify({
              kilometer: serviceKilometerText
            }),
            headers:{
              'Content-Type': 'application/json; charset=utf-8'
            }
          })

          if(response.status == 200){
            $('#successModal').modal('show');
            setTimeout(() => location.reload(), 2000);
          }else{
            alert('something went wrong')
          }
        }catch(error){
          alert(error.message)
        }
      }

    
    </script>
    
    <script>



document.getElementById('general').style.display = "block";
document.getElementById('general').className += " active";

function openSection(evt, cityName) {
  var i, tabcontent, tablinks;
  tabcontent = document.getElementsByClassName("tabcontent");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }
  tablinks = document.getElementsByClassName("tablinks");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }
  document.getElementById(cityName).style.display = "block";
  evt.currentTarget.className += " active";
}


      const emailText = document.getElementById('emailText');
      const emailPreviewText = document.querySelector('.email-preview-text');

      const emailSubject = document.getElementById('emailSubject')
      const emailSubjectPreview = document.querySelector('.email-preview-subject')

      const smsTestPreview = document.querySelector('.sms-template-preview')
      const smsText = document.getElementById('smsText')

      smsText.addEventListener('input', function() {
          const template = smsText.value;
          const updatedPreview = template
              .replace(/{private}/g, 'EL 01')
              .replace(/{board}/g, 'Ec65656')
              .replace(/{pnid}/g, 'pn167')
              .replace(/{kilometers}/g, '2000');
          
          smsTestPreview.textContent = updatedPreview;
      });


      smsTestPreview.textContent = '<%=sms_template%>'
              .replace(/{private}/g, 'EL 01')
              .replace(/{board}/g, 'Ec65656')
              .replace(/{pnid}/g, 'pn167')
              .replace(/{kilometers}/g, '2000');

      emailSubjectPreview.textContent = '<%=email_subject%>'
              .replace(/{private}/g, 'EL 01')
              .replace(/{board}/g, 'Ec65656')
              .replace(/{pnid}/g, 'pn167')
              .replace(/{kilometers}/g, '2000');
      
      emailSubject.addEventListener('input', function() {
          const template = emailSubject.value;
          const updatedPreview = template
              .replace(/{private}/g, 'EL 01')
              .replace(/{board}/g, 'Ec65656')
              .replace(/{pnid}/g, 'pn167')
              .replace(/{kilometers}/g, '2000');
          
          emailSubjectPreview.textContent = updatedPreview;
      });


      emailPreviewText.textContent = '<%=email_template%>'
              .replace(/{private}/g, 'EL 01')
              .replace(/{board}/g, 'Ec65656')
              .replace(/{pnid}/g, 'pn167')
              .replace(/{kilometers}/g, '2000');
      
      emailText.addEventListener('input', function() {
          const template = emailText.value;
          const updatedPreview = template
              .replace(/{private}/g, 'EL 01')
              .replace(/{board}/g, 'Ec65656')
              .replace(/{pnid}/g, 'pn167')
              .replace(/{kilometers}/g, '2000');
          
          emailPreviewText.textContent = updatedPreview;
      });


      async function updateEmailAndPassword(){
        let username = document.getElementById('username')
        let password = document.getElementById('password')

        let response = await fetch('/api/settings/credentials',{
          method:'PUT',
          headers:{
            'Content-Type': 'application/json; charset=utf-8'
          },
          body:JSON.stringify({
            username: username.value,
            password: password.value
          })
        })

        if(response.status == 200){
          $('#successModal').modal('show');
                setTimeout(() => location.reload(), 2000);
        }
      }

      async function updateEmailTemplate(){

        let response = await fetch('/api/settings/emailTemplate',{
          method:'PUT',
          headers:{
            'Content-Type': 'application/json; charset=utf-8'
          },
          body:JSON.stringify({
            subject:emailSubject.value,
            text: emailText.value
          })
        })

        if(response.status == 200){
          $('#successModal').modal('show');
                setTimeout(() => location.reload(), 2000);
        }
      }

      async function updateSmsTemplate(){
        let text = document.querySelector('.sms-template-preview')

        let response = await fetch('/api/settings/smsTemplate',{
          method:'PUT',
          headers:{
            'Content-Type': 'application/json; charset=utf-8'
          },
          body:JSON.stringify({
            text: smsText.value
          })
        })

        if(response.status == 200){
          $('#successModal').modal('show');
                setTimeout(() => location.reload(), 2000);
        }
      }
  </script>
</body>
</html>
