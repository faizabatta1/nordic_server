<!DOCTYPE html>
<html>
<head>
    <title>Edit Form Field</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
<%- include('../components/navbar') %>
<div class="container">
    <form id="editFormFieldForm">
        <div class="form-group">
            <label for="title">Title</label>
            <input type="text" class="form-control" id="title" name="title" value="<%= formField.title %>" required>
        </div>
        <div class="form-group">
            <label for="answerDataType">Svardatatype</label>
            <select class="form-control" id="answerDataType" name="answerDataType" required onchange="toggleAdditionalFields()">
                <option value="text">Tekst</option>
                <option value="number">Nummer</option>
                <option value="yes_no">Ja-Nei</option>
                <option value="file">File</option>
                <option value="date">Dato</option>
                <option value="image">Bilde</option>
            </select>
        </div>

        <div class="form-group">
            <label for="form">Skjema</label>
            <select class="form-control" id="form" name="form">
                <option value="First">Bilskjema</option>
                <option value="Second">dagensskjema</option>
                <!-- Add more options as needed -->
            </select>
        </div>
        <div class="form-group">
            <label for="group">Gruppe</label>
            <select class="form-control" id="group" name="group">
                <% groups.forEach(group => { %>
                    <option value="<%= group._id %>"><%= group.name %></option>
                <% }); %>
            </select>
        </div>
        <div class="form-group form-check" style="display: none" id="hasRequiredDescriptionGroup">
            <input type="checkbox" class="form-check-input" id="hasRequiredDescription" name="hasRequiredDescription" <%= formField.hasRequiredDescription ? 'checked' : '' %> onchange="toggleRequiredDescription()">
            <label class="form-check-label" for="hasRequiredDescription">Har nødvendig beskrivelse</label>
        </div>
        <div class="form-group" style="display: none" id="requiredDescriptionGroup">
            <label for="requiredDescription">Nødvendig beskrivelse</label>
            <input type="text" class="form-control" id="requiredDescription" name="requiredDescription" disabled value="<%= formField.requiredDescription %>">
        </div>
        <div class="form-group" style="display: none;" id="positiveGroup">
            <label for="positive">Velg når du vil få beskrivelse</label>
            <select name="positive" class="form-control" id="positive" disabled>
                <option value="yes">Ja</option>
                <option value="no">Nei</option>
            </select>
        </div>
        <div class="d-flex justify-content-center">
            <button type="submit" class="btn btn-primary">Oppdater</button>
            &nbsp;
            &nbsp;
            <a href="/fields" class="btn btn-secondary">Avbrytt</a>
        </div>
    </form>
    <div class="alert alert-success mt-3" id="successAlert" style="display: none;">
        Field Updated Successfully
    </div>
    <div class="alert alert-danger mt-3" id="failureAlert" style="display: none;">
        Failed to Update Field
    </div>
</div>

<script>
    function toggleRequiredDescription() {
        const requiredDescriptionInput = document.getElementById("requiredDescription");
        const positive = document.getElementById("positive");
        const checkbox = document.getElementById("hasRequiredDescription");
        requiredDescriptionInput.disabled = !checkbox.checked;
        positive.disabled = !checkbox.checked;
    }

    // Function to show/hide additional fields for "Ja-Nei" question type
    function toggleAdditionalFields() {
        const answerDataType = document.getElementById("answerDataType");
        const requiredDescriptionGroup = document.getElementById("hasRequiredDescriptionGroup"); // Corrected ID
        const requiredDescriptionField = document.getElementById("requiredDescriptionGroup"); // Corrected ID
        const positiveGroup = document.getElementById("positiveGroup"); // Corrected ID

        console.log(answerDataType.value)
        if (answerDataType.value === "yes_no") {
            requiredDescriptionGroup.style.display = "block";
            requiredDescriptionField.style.display = "block";
            positiveGroup.style.display = "block";
        } else {
            requiredDescriptionGroup.style.display = "none";
            requiredDescriptionField.style.display = "none";
            positiveGroup.style.display = "none";
        }
    }



    const form = document.getElementById('editFormFieldForm')
    form.addEventListener('submit', (event) => {
        event.preventDefault();
        const title = document.getElementById('title');
        const answerDataType = document.getElementById('answerDataType');
        const hasRequiredDescription = document.getElementById('hasRequiredDescription');
        const requiredDescription = document.getElementById('requiredDescription');
        const whenToGetDescription = document.getElementById('positive');
        const formId = document.getElementById('form').value; // Get selected form value
        const groupId = document.getElementById('group').value; // Get selected group value

        const formFieldId = '<%= formField._id %>';

        fetch(`/api/formFields/${formFieldId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({
                title: title.value,
                answerDataType: answerDataType.value,
                hasRequiredDescription: hasRequiredDescription.checked,
                requiredDescription: requiredDescription.value,
                whenToGetDescription: whenToGetDescription.value,
                form:formId,
                group:groupId
            })
        })
            .then(response => {
                if (response.status == 200) {
                    // Show success alert and hide failure alert
                    document.getElementById('successAlert').style.display = 'block';
                    document.getElementById('failureAlert').style.display = 'none';
                    setTimeout(() => {
                        location.href = '/fields'
                    }, 3000);
                } else {
                    // Show failure alert and hide success alert
                    document.getElementById('successAlert').style.display = 'none';
                    document.getElementById('failureAlert').style.display = 'block';
                }
            })
            .catch(error => {
                // Handle fetch error
                console.error('Error occurred during fetch:', error);
                // Show failure alert and hide success alert
                document.getElementById('successAlert').style.display = 'none';
                document.getElementById('failureAlert').style.display = 'block';
            });
    });
</script>
</body>
</html>
