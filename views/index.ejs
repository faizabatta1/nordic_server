<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Nordic Test</title>
    <style>

:root {
  --background-color1: #fafaff;
  --background-color2: #ffffff;
  --background-color3: #ededed;
  --background-color4: #cad7fda4;
  --primary-color: #4b49ac;
  --secondary-color: #0c007d;
  --Border-color: #3f0097;
  --one-use-color: #3f0097;
  --two-use-color: #5500cb;
}

        body {
            font-family: Arial, sans-serif;
            background-color: #f8f8f8;
            margin: 0;
            padding: 0;
        }

        header {
            background-color: #007bff;
            color: white;
            padding: 8px;
            text-align: center;
        }


        .welcome-message {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 20px;
        }

        .statistics {
            display: flex;
            justify-content: space-between;
            margin-bottom: 30px;
        }

        .stat-card {
            background-color: #209873;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            padding: 20px;
            flex: 1;
        }

        


        .notifications {
            background-color: #f5f5f5;
            border-radius: 8px;
            padding: 20px;
            height: 250px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .notification-item {
            margin-bottom: 10px;
            padding: 10px;
            background-color: white;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .notification-item img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .quick-links {
            display: flex;
            justify-content: center;
            margin-top: 30px;
        }

        .quick-link-item {
            background-color: #007bff;
            color: white;
            padding: 15px 30px;
            border-radius: 8px;
            margin-right: 10px;
            text-decoration: none;
            font-weight: bold;
            text-transform: uppercase;
            transition: background-color 0.2s;
        }

        .quick-link-item:hover {
            background-color: #0056b3;
        }

        .stat-card{
            background-color: #5601cc;
            color: white;
            font-size: 24px;
        }


        .ks{
            display: flex;
        }

        #violationsFilter {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
            margin-bottom: 12px;
        }

        .ks i{
            font-size: 40px !important;
        }

        .ks > *{
            flex-grow: 1;
        }

        .ks > :first-child{
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: center;
        }

        .ks > :last-child{
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .topic {
  font-size: 13px;
  font-weight: 400;
  letter-spacing: 1px;
}
 
.topic-heading {
  font-size: 30px;
  letter-spacing: 3px;
}

.box-container {
  display: flex;
  justify-content: space-evenly;
  align-items: center;
  flex-wrap: wrap;
  gap: 50px;
}

.box {
  height: 130px;
  width: 230px;
  border-radius: 20px;
  box-shadow: 3px 3px 10px rgba(0, 30, 87, 0.751);
  padding: 20px;
  display: flex;
  align-items: center;
  justify-content: space-around;
  cursor: pointer;
  transition: transform 0.3s ease-in-out;
}
.box:hover {
  transform: scale(1.08);
}
 
.box:nth-child(1) {
  background-color: var(--one-use-color);
}
.box:nth-child(2) {
  background-color: var(--two-use-color);
}
.box:nth-child(3) {
  background-color: var(--one-use-color);
}
.box:nth-child(4) {
  background-color: var(--two-use-color);
}
 
.box img {
  height: 50px;
}
.box .text {
  color: white;
}

    </style>

<script src="https://d3js.org/d3.v6.js"></script>

</head>
<body>
<%- include('./components/navbar') %>
<div class="mt-4"></div>
<div class="container">
    <div class="welcome-message">Hei, Admin!</div>

    <select name="violationsFilter" id="violationsFilter">
        <option value="0">Hele tiden</option>
        <option value="6">I går</option>
        <option value="1">I dag</option>
        <option value="2">3 dager siden</option>
        <option value="3">en uke siden</option>
        <option value="4">en måned siden</option>
        <option value="5">ett år siden</option>
    </select>

    <div class="box-container">
 
        <div class="box box1">
            <div class="text">
                <h2 class="topic-heading" id="vio-num">-</h2>
                <h2 class="topic">Total K.S</h2>
            </div>

            <img src=
"https://test.bilsjekk.in/images/violations.png"
                alt="Views">
        </div>

        <div class="box box2">
            <div class="text">
                <h2 class="topic-heading">-</h2>
                <h2 class="topic">Snart</h2>
            </div>

            <img src=
"https://test.bilsjekk.in/images/pdfs.png"
                 alt="likes">
        </div>

        <div class="box box3">
            <div class="text">
                <h2 class="topic-heading">-</h2>
                <h2 class="topic">Snart</h2>
            </div>

            <img src=
"https://test.bilsjekk.in/images/users.png"
                alt="comments">
        </div>

        <div class="box box4">
            <div class="text">
                <h2 class="topic-heading">-</h2>
                <h2 class="topic">Snart</h2>
            </div>

            <img src=
"https://test.bilsjekk.in/images/accidents.png" alt="published">
        </div>
    </div>

    <div id="chart">

    </div>

    <div class="quick-links">
        <a href="/users" class="quick-link-item">Administrer brukere</a>
        <a href="/groups" class="quick-link-item">Administrer grupper</a>
        <a href="/fields" class="quick-link-item">Administrer skjema</a>
        <a href="/pdfs" class="quick-link-item">Se Ferdigskjema</a>
        <!-- Add more quick links as needed -->
    </div>
</div>
<script src="https://kit.fontawesome.com/7d365a7c21.js" crossorigin="anonymous"></script>

<script>
// Sample data (replace this with your actual data)
const generateRandomData = () => {
            const startDate = new Date('2023-08-01');
            const endDate = new Date('2023-09-01');
            const data = [];

            for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
                data.push({
                    date: d.toISOString().split('T')[0],
                    value: Math.floor(Math.random() * 50) + 10
                });
            }

            return data;
        };

        const data = generateRandomData();

// Set up the dimensions of the chart
const margin = { top: 20, right: 30, bottom: 30, left: 40 };
const width = 900 - margin.left - margin.right;
const height = 500 - margin.top - margin.bottom;

// Parse the date format
const parseDate = d3.utcParse('%Y-%m-%d');

// Set up the scales
const x = d3.scaleUtc()
  .domain(d3.extent(data, d => parseDate(d.date)))
  .range([0, width]);

const y = d3.scaleLinear()
  .domain([0, d3.max(data, d => d.value)])
  .nice()
  .range([height, 0]);

// Create the line
const line = d3.line()
  .x(d => x(parseDate(d.date)))
  .y(d => y(d.value));

// Create the SVG element

// Create the SVG element with dynamic width
const svg = d3.select('#chart').append('svg')
            .attr('width', '100%')
            .attr('height', height + margin.top + margin.bottom)
            .append('g')
            .attr('transform', `translate(${margin.left},${margin.top})`);

        // Add the line to the chart with dynamic width
        svg.append('path')
            .datum(data)
            .attr('fill', 'none')
            .attr('stroke', 'steelblue')
            .attr('stroke-width', 2)
            .attr('d', line)
            .attr('class', 'line'); // Add a class for the line

        // Add the X axis with dynamic width
        svg.append('g')
            .attr('class', 'x-axis') // Add a class for the X axis
            .attr('transform', `translate(0,${height})`)
            .call(d3.axisBottom(x));

        // Add the Y axis
        svg.append('g')
            .call(d3.axisLeft(y));

        // Add zoom and pan behavior
        const zoom = d3.zoom()
            .scaleExtent([1, 8])
            .on('zoom', zoomed);

        svg.call(zoom);

        function zoomed(event) {
            const newX = event.transform.rescaleX(x);
            svg.select('.line').attr('d', line.x(d => newX(parseDate(d.date))));
            svg.select('.x-axis').call(d3.axisBottom(newX));
            svg.selectAll('.point') // Update points' positions on zoom
                .attr('cx', d => newX(parseDate(d.date)));
        }


        const tooltip = svg.append('g')
            .attr('class', 'tooltip')
            .style('display', 'none');

        tooltip.append('rect')
            .attr('width', 60)
            .attr('height', 30)
            .attr('fill', 'white')
            .style('opacity', 0.8);

        tooltip.append('text')
            .attr('x', 30)
            .attr('dy', '1.2em')
            .style('text-anchor', 'middle')
            .attr('font-size', '12px')
            .attr('font-weight', 'bold');
        
        function showTooltip(event, d) {
            tooltip.style('display', 'block');
            tooltip.attr('transform', `translate(${x(parseDate(d.date))},${y(d.value)})`);
            tooltip.select('text').text(d.value);
        }

        function hideTooltip() {
            tooltip.style('display', 'none');
        }
</script>



<script>
    async function fetchData(url) {
        const response = await fetch(url);
        if (response.status === 200) {
            return await response.json();
        } else {
            throw new Error('Failed to fetch data');
        }
    }

    async function updateViolationCount() {
        const holder = document.getElementById('vio-num');
        const selectVio = document.getElementById('violationsFilter');
        const value = selectVio.value;
        console.log(value);

        try {
            const data = await fetchData(`/api/violations/${value}`);
            console.log(data);
            holder.textContent = data;
        } catch (error) {
            console.error(error);
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        updateViolationCount();

        const selectVio = document.getElementById('violationsFilter');
        selectVio.addEventListener('change', updateViolationCount);
    });
</script>
</body>
</html>
