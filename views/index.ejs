<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Nordic Test</title>
    <style>

:root {
  --background-color1: #fafaff;
  --background-color2: #ffffff;
  --background-color3: #ededed;
  --background-color4: #cad7fda4;
  --primary-color: #4b49ac;
  --secondary-color: #0c007d;
  --Border-color: #3f0097;
  --one-use-color: #3f0097;
  --two-use-color: #5500cb;
}

        body {
            font-family: Arial, sans-serif;
            background-color: #f8f8f8;
            margin: 0;
            padding: 0;
        }

        header {
            background-color: #007bff;
            color: white;
            padding: 8px;
            text-align: center;
        }


        .welcome-message {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 20px;
        }

        .statistics {
            display: flex;
            justify-content: space-between;
            margin-bottom: 30px;
        }

        .stat-card {
            background-color: #209873;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            padding: 20px;
            flex: 1;
        }

        


        .notifications {
            background-color: #f5f5f5;
            border-radius: 8px;
            padding: 20px;
            height: 250px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .notification-item {
            margin-bottom: 10px;
            padding: 10px;
            background-color: white;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .notification-item img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .quick-links {
            display: flex;
            justify-content: center;
            margin-top: 30px;
        }

        .quick-link-item {
            background-color: #007bff;
            color: white;
            padding: 15px 30px;
            border-radius: 8px;
            margin-right: 10px;
            text-decoration: none;
            font-weight: bold;
            text-transform: uppercase;
            transition: background-color 0.2s;
        }

        .quick-link-item:hover {
            background-color: #0056b3;
        }

        .stat-card{
            background-color: #5601cc;
            color: white;
            font-size: 24px;
        }


        .ks{
            display: flex;
        }

        #violationsFilter {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
            margin-bottom: 12px;
        }

        .ks i{
            font-size: 40px !important;
        }

        .ks > *{
            flex-grow: 1;
        }

        .ks > :first-child{
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: center;
        }

        .ks > :last-child{
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .topic {
  font-size: 13px;
  font-weight: 400;
  letter-spacing: 1px;
}
 
.topic-heading {
  font-size: 30px;
  letter-spacing: 3px;
}

.box-container {
  display: flex;
  justify-content: space-evenly;
  align-items: center;
  flex-wrap: wrap;
  gap: 50px;
}

.box {
  height: 130px;
  width: 230px;
  border-radius: 20px;
  box-shadow: 3px 3px 10px rgba(0, 30, 87, 0.751);
  padding: 20px;
  display: flex;
  align-items: center;
  justify-content: space-around;
  cursor: pointer;
  transition: transform 0.3s ease-in-out;
}
.box:hover {
  transform: scale(1.08);
}
 
.box:nth-child(1) {
  background-color: var(--one-use-color);
}
.box:nth-child(2) {
  background-color: var(--two-use-color);
}
.box:nth-child(3) {
  background-color: var(--one-use-color);
}
.box:nth-child(4) {
  background-color: var(--two-use-color);
}
 
.box img {
  height: 50px;
}
.box .text {
  color: white;
}

    </style>

<script src="https://d3js.org/d3.v6.js"></script>

</head>
<body>
<%- include('./components/navbar') %>
<div class="mt-4"></div>
<div class="container">
    <div class="welcome-message">Hei, Admin!</div>

    <select name="violationsFilter" id="violationsFilter">
        <option value="0">Hele tiden</option>
        <option value="6">I går</option>
        <option value="1">I dag</option>
        <option value="2">3 dager siden</option>
        <option value="3">en uke siden</option>
        <option value="4">en måned siden</option>
        <option value="5">ett år siden</option>
    </select>

    <div class="box-container">
 
        <div class="box box1">
            <div class="text">
                <h2 class="topic-heading" id="vio-num">-</h2>
                <h2 class="topic">Total K.S</h2>
            </div>

            <img src=
"https://media.geeksforgeeks.org/wp-content/uploads/20221210184645/Untitled-design-(31).png"
                alt="Views">
        </div>

        <div class="box box2">
            <div class="text">
                <h2 class="topic-heading">-</h2>
                <h2 class="topic">Snart</h2>
            </div>

            <img src=
"https://media.geeksforgeeks.org/wp-content/uploads/20221210185030/14.png"
                 alt="likes">
        </div>

        <div class="box box3">
            <div class="text">
                <h2 class="topic-heading">-</h2>
                <h2 class="topic">Snart</h2>
            </div>

            <img src=
"https://media.geeksforgeeks.org/wp-content/uploads/20221210184645/Untitled-design-(32).png"
                alt="comments">
        </div>

        <div class="box box4">
            <div class="text">
                <h2 class="topic-heading">-</h2>
                <h2 class="topic">Snart</h2>
            </div>

            <img src=
"https://media.geeksforgeeks.org/wp-content/uploads/20221210185029/13.png" alt="published">
        </div>
    </div>

    <div id="chart">

    </div>

    <div class="quick-links">
        <a href="/users" class="quick-link-item">Administrer brukere</a>
        <a href="/groups" class="quick-link-item">Administrer grupper</a>
        <a href="/fields" class="quick-link-item">Administrer skjema</a>
        <a href="/pdfs" class="quick-link-item">Se Ferdigskjema</a>
        <!-- Add more quick links as needed -->
    </div>
</div>
<script src="https://kit.fontawesome.com/7d365a7c21.js" crossorigin="anonymous"></script>



<script>

    // set the dimensions and margins of the graph
    const margin = {top: 10, right: 30, bottom: 30, left: 60},
        width = 460 - margin.left - margin.right,
        height = 400 - margin.top - margin.bottom;
    
    // append the svg object to the body of the page
    const svg = d3.select("#chart")
      .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform",
              `translate(${margin.left}, ${margin.top})`);
    
    //Read the data
    d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv",
    
      // When reading the csv, I must format variables:
      function(d){
        return { date : d3.timeParse("%Y-%m-%d")(d.date), value : d.value }
      }).then(
    
      // Now I can use this dataset:
      function(data) {
    
        // Add X axis --> it is a date format
        const x = d3.scaleTime()
          .domain(d3.extent(data, function(d) { return d.date; }))
          .range([ 0, width ]);
        xAxis = svg.append("g")
          .attr("transform", `translate(0, ${height})`)
          .call(d3.axisBottom(x));
    
        // Add Y axis
        const y = d3.scaleLinear()
          .domain([0, d3.max(data, function(d) { return +d.value; })])
          .range([ height, 0 ]);
        yAxis = svg.append("g")
          .call(d3.axisLeft(y));
    
        // Add a clipPath: everything out of this area won't be drawn.
        const clip = svg.append("defs").append("svg:clipPath")
            .attr("id", "clip")
            .append("svg:rect")
            .attr("width", width )
            .attr("height", height )
            .attr("x", 0)
            .attr("y", 0);
    
        // Add brushing
        const brush = d3.brushX()                   // Add the brush feature using the d3.brush function
            .extent( [ [0,0], [width,height] ] )  // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area
            .on("end", updateChart)               // Each time the brush selection changes, trigger the 'updateChart' function
    
        // Create the line variable: where both the line and the brush take place
        const line = svg.append('g')
          .attr("clip-path", "url(#clip)")
    
        // Add the line
        line.append("path")
          .datum(data)
          .attr("class", "line")  // I add the class line to be able to modify this line later on.
          .attr("fill", "none")
          .attr("stroke", "steelblue")
          .attr("stroke-width", 1.5)
          .attr("d", d3.line()
            .x(function(d) { return x(d.date) })
            .y(function(d) { return y(d.value) })
            )
    
        // Add the brushing
        line
          .append("g")
            .attr("class", "brush")
            .call(brush);
    
        // A function that set idleTimeOut to null
        let idleTimeout
        function idled() { idleTimeout = null; }
    
        // A function that update the chart for given boundaries
        function updateChart(event,d) {
    
          // What are the selected boundaries?
          extent = event.selection
    
          // If no selection, back to initial coordinate. Otherwise, update X axis domain
          if(!extent){
            if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit
            x.domain([ 4,8])
          }else{
            x.domain([ x.invert(extent[0]), x.invert(extent[1]) ])
            line.select(".brush").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done
          }
    
          // Update axis and line position
          xAxis.transition().duration(1000).call(d3.axisBottom(x))
          line
              .select('.line')
              .transition()
              .duration(1000)
              .attr("d", d3.line()
                .x(function(d) { return x(d.date) })
                .y(function(d) { return y(d.value) })
              )
        }
    
        // If user double click, reinitialize the chart
        svg.on("dblclick",function(){
          x.domain(d3.extent(data, function(d) { return d.date; }))
          xAxis.transition().call(d3.axisBottom(x))
          line
            .select('.line')
            .transition()
            .attr("d", d3.line()
              .x(function(d) { return x(d.date) })
              .y(function(d) { return y(d.value) })
          )
        });
    
    })
    </script>

<script>
    async function fetchData(url) {
        const response = await fetch(url);
        if (response.status === 200) {
            return await response.json();
        } else {
            throw new Error('Failed to fetch data');
        }
    }

    async function updateViolationCount() {
        const holder = document.getElementById('vio-num');
        const selectVio = document.getElementById('violationsFilter');
        const value = selectVio.value;
        console.log(value);

        try {
            const data = await fetchData(`/api/violations/${value}`);
            console.log(data);
            holder.textContent = data;
        } catch (error) {
            console.error(error);
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        updateViolationCount();

        const selectVio = document.getElementById('violationsFilter');
        selectVio.addEventListener('change', updateViolationCount);
    });
</script>
</body>
</html>
